export const descriptions = {
    gg: '',
    saga: `SAGA Movie Database is an app that displays a list of movies. The movies can be clicked on and the user will be taken to a details page, with a description, movie poster, the genres the movie falls into and title. There is an add movie button on the header than can be clicked to add a movie to the database.
    
    For the previous two projects I've used Material-UI to style the page. For this project I decided to rely solely on my vanilla css skills. The movie list page is styled in an overlapping cards carousel. Hover over the cards will reveal more of the card and show the title of the movie layed over the image of the poster. The add movie page selects a random background image from a movie. I am happy with the way the app looks, but I would definitely like to tweak a couple things.`,
    gallery: `I built a photo album using React. This is my first attempt creating something with React and I was pleased with how well it went. The styling is a combination of vanilla css and components from Material UI. The first thing I did when I started the project was implement a database. The project was setup to store data on the server but I wanted to go the extra mile and make the data more permanent. I rewrote the get and put routes and implemented PG to talk to the database.

    I wanted to make sure that the project looked appealing but wasn't overly styled as to take attention away from the photos. The photos are sorted by their id from the database and then by their orientation. Portrait photos appear first and landscape photos second. If a user clicks on the photo it will reveal a description of the photo. A like button is located on the lower left corner of the photo and when pressed increments a like counter on the right. The amount of likes a picture has is stored in the database. A expand photo button is placed to the right of the counter. Clicking on this will display a larger more full version of the photo. Clicking anywhere on the DOM will close the larger photo. `,
    td: `A todo list with database implementation. The interface allows a user to add tasks to be displayed on the DOM. A user will enter their task, a category under which to file the task and a date the task should be accomplished by. All tasks are displayed on the right side of the DOM. Tasks are ordered by their status, uncompleted tasks will always appear above completed. An icon on the left side of the task shows what category the task belongs to. The task is displayed in the middle of the task container, the date it was added and the target date of completion are listed underneath. On the right side of the task are buttons to mark task completed, edit the task and delete it.

    Editing the task will empty out the task container and allow the user to edit that task. Marking task complete will change the color from blue to pink and move it to the bottom of the task stack. The word completed will also appear on the left side of the task card. Only one task can be edited at a time. Confirming or canceling changes will allow the user to edit another.
    
    All categories will be displayed as tags underneath the task input field. The user has the ability to create and delete custom tags here.`,
    calc: `Built a functional basic calculator where all math is done on the server and sent back to the dom through AJAX gets and posts. I quickly built out the base function of the calculator and went on to making it a little more complicated. Calculator can do all things you'd expect a basic calculator to do, addition, subtraction, division, and multiplication.

    After basic functionality was built and tested I moved on to a few more complicated tasks. Adding a plus/minus toggle button, a square root function, and a percent conversion button. Pressing the c/ch once will clear the numbers on screen. If you are at zero pressing it again will clear the calculation history on the right of the calculator. In addition to those functions, I added a fully functional memory function like you'd find on a scientific calculator. I had to read about how those systems work and do a little experimenting but its in there and does what it's supposed to do. Press the M+ or M- after entering a number and a positive or negative version of that number will be stored in the server. You can add and subtract to that number in the same manner. Pressing the MRC button once will recall the memory number. If the number on screen is the number is the number in memory pressing the MRC button again will reset that memory value back to 0 on the server.`
};
